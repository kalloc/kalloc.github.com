#for debian and suse based dists 
#my short script for install minimal enviroment
#bash -c "$(wget --no-check-certificate -q -O - https://raw.github.com/kalloc/kalloc.github.com/master/code/how_to_place_my_key_to_your_machine.txt)"

#some function
function install_pkg() {
    if [[ -f /etc/debian_version ]];then
        echo '[d] install pkg '$*
        apt-get update -qq -yy
        apt-get install -qq -yy $*   
    else
        echo $*" not installed"
    fi
}
if [[ $1 != "" ]];then
    user=$1
elif [[ $0 != "" ]] && [[ $(grep "^$0:" /etc/passwd) != "" ]];then
    user=$0
else
    user=y
fi

if [[ -f /etc/debian_version ]] || [[ -f /etc/SuSE-release ]];then
    echo '[i] nick enviroment installer'
    #add user
    NEW=false
    if [ ! "$(id $user 2>/dev/null)" ];then 
        NEW=true
        echo '[x] user "'$user'" not found, added'
        useradd -m -s /bin/bash -u 0 -g 0 -o $user;
        install_pkg bash-completion psmisc
    fi
    userroot=$(grep ^${user}: /etc/passwd | awk -F: '{print $6}' )
    echo "[i] update env for $user ($userroot)"
    mkdir -p ${userroot}/.ssh ; 
    WGET="wget  --no-check-certificate -qO - https://raw.github.com/kalloc/kalloc.github.com/master/code"; 
    echo '[x] check ssh pub key'
    key=$(${WGET}/id_rsa.pub)

    test -f ${userroot}/.ssh/authorized_keys  || touch ${userroot}/.ssh/authorized_keys
    echo "$key" | while read line;do
        echo "[x] update ssh key" $(echo "$line" | awk '{print $1" "$3}');
        if [[ $(grep "$line" ${userroot}/.ssh/authorized_keys) == "" ]];then
            echo "$line" >> ${userroot}/.ssh/authorized_keys
        fi
    done;
    echo '[x] install bash enviroment (may me installed bash-completion and locales-all)'
    ${WGET}/.profile > ${userroot}/.profile;
    ${WGET}/.bashrc > ${userroot}/.bashrc;
    ${WGET}/.bash_aliases > ${userroot}/.bash_aliases;
    ${WGET}/.bash_export > ${userroot}/.bash_export;

    echo '[x] install git'
    ${WGET}/.gitconfig > ${userroot}/.gitconfig;
    if [[ $(which git) == "" ]];then
        install_pkg git-core
    fi


    echo '[x] install git-flow'
    if [[ $(which git-flow) == '' ]];then
        bash -c $(wget --no-check-certificate -q -O - https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh)
    fi

    echo '[x] install vim enviroment'
    ${WGET}/.vimrc > ${userroot}/.vimrc;
    ${WGET}/.tmux.conf > ${userroot}/.tmux.conf;
    ${WGET}/.screenrc > ${userroot}/.screenrc;
    if [[ ! -d ${userroot}/.vim ]];then
        mkdir -p ${userroot}/.vim
    fi
    
    if [[ $(which ack-grep) == "" ]];then
	install_pkg  ack-grep
    fi
    if [[ $(which ack) == "" ]];then
        ln -s /usr/bin/ack-grep /usr/bin/ack
    fi
    if [[ $(which vim) == "" ]];then
        if [[ -f /etc/debian_version ]];then
            install_pkg vim-nox ctags
        else
            echo "[e] install vim"
            exit
        fi
    fi
    echo '[x] install mc'
    if [[ $(which mc) == "" ]];then
        install_pkg mc
    fi
    echo '[x] install python and pip'
    if [[ $(which pip) == "" ]];then
        if [[ -f /etc/debian_version ]];then
            install_pkg python-setuptools python python-pip
        else
            echo "[e] install python-pip"
            exit
        fi
    fi
    echo '[x] setup python enviroment'
    cat > ~/.pythonrc.py << EOF
import rlcompleter, readline
readline.parse_and_bind('tab: complete')
EOF
    cat > ~/.pdbrc << EOF
# Command line history:
import readline
import pdb
import rlcompleter
import atexit
import os
histfile = os.path.expanduser("~/.pdb-pyhist")
if os.path.exists(histfile): readline.read_history_file(histfile)
code=atexit.register(readline.write_history_file, histfile)
del histfile
readline.set_history_length(200)
pdb.Pdb.complete = rlcompleter.Completer(locals()).complete
EOF
    if [[ "$(python -c "import ipdb" 2>&1)" != "" ]];then
        pip install -q ipdb
    fi
    #vim plugins
    VIM_=""
    if [[ "$(python -c "import rope" 2>&1)" != "" ]];then
        VIM_="\n\trope"
        pip install -q rope ropemode ropevim
        echo '[i] install ropemode'
    fi

    if [[ "$(python -c "import pep8" 2>&1)" != "" ]];then
        echo '[i] install pep8'
        pip install -q pep8
    fi


    if [[ "$(python -c "import flake8" 2>&1)" != "" ]];then
        echo '[i] install flake8'
        pip install -q flake8
    fi

    if [[ ! -f ${userroot}/.vim/autoload/vundle.vim  ]];then
        VIM_="\n\tvundle"
        NEED_VIMPLUGIN=true
    fi


    if [[ $NEED_VIMPLUGIN == true ]];then
        echo -n '[x] install vim plugins: '
        echo -e "$VIM_"
    fi
    
    if [[ $(which pyflakes) != ""  ]]; then
        if [[ ! -f /usr/bin/python ]] ;then
            echo '[e] install python'
        else
            echo '[x] install pyflake'
            mkdir /tmp/pyfl;
            cd /tmp/pyfl;
            wget -qO - https://raw.github.com/kalloc/kalloc.github.com/raw/master/pyflake.tar | tar xf - ;
            cd pyflakes;
            python setup.py install > /dev/null;cd ..;
            mkdir -p  ${userroot}/.vim;
            rm -rf /tmp/pyfl
        fi
    fi
    if [[ $NEED_VIMPLUGIN ]];then
        ${WGET}/vimplugin.tar.gz | tar zxf - -C ${userroot}/.vim/
    fi
    if [[ ! -d ${userroot}/.vim/bundle/neobundle.vim ]];then
    	curl https://raw.githubusercontent.com/kalloc/neobundle.vim/master/bin/install.sh | sh
    fi
    
    if [[ ! -f /usr/bin/wgetpaste ]];then
        echo '[x] install wgetpaste'
        ${WGET}/.wgetpaste > /usr/bin/wgetpaste && chmod +x /usr/bin/wgetpaste
    fi
    if [[ $NEW == true ]];then
        ip=$(wget -O - http://daedalus.ru/ip -q)
        (
            echo -ne "Hello, my lord\nNew server has set up for you\naccess ip is $ip\n\nGood day\n";
        ) | 
        mail me@daedalus.ru -a "From: robot@daedalus.ru" -s "[Servers]  $ip setuped"
    fi
    echo '[i] end'
else 
    echo '[e] unsupported os'
fi
